package main

import (
	"reflect"
	"testing"
)

// go test -v
func TestOrderedCount(t *testing.T) {
	var tt = []struct {
		input1   string
		expected string
	}{
		{"103 123 4444 99 2000", "2000 103 123 4444 99"},
		{"2000 10003 1234000 44444444 9999 11 11 22 123", "11 11 2000 10003 22 123 1234000 44444444 9999"},
		{"", ""},
		{"10003 1234000 44444444 9999 2000 123456789", "2000 10003 1234000 44444444 9999 123456789"},
		{"3 16 9 38 95 1131268 49455 347464 59544965313 496636983114762 85246814996697", "3 16 9 38 95 1131268 49455 347464 59544965313 496636983114762 85246814996697"},
		{"71899703 200 6 91 425 4 67407 7 96488 6 4 2 7 31064 9 7920 1 34608557 27 72 18 81", "1 2 200 4 4 6 6 7 7 18 27 72 81 9 91 425 31064 7920 67407 96488 34608557 71899703"},
		{"387087 176 351832 100 430372 8 58052 54 175432 120 269974 147 309754 91 404858 67 271476 164 295747 111 40",
			"100 111 120 40 8 54 91 164 147 67 176 430372 58052 175432 351832 271476 309754 404858 387087 295747 269974"},
		{"258685 71 467635 67 198351 135 346769 43 198445 135 96", "43 71 135 135 67 96 198351 198445 467635 258685 346769"},
		{"213324 72 60859 192 17787 125 33198 77 162250 63 22", "22 125 63 72 192 77 213324 162250 33198 60859 17787"},
		{"152711 29 285811 26 126388 120 445190 113 417758 60 40", "120 40 113 60 26 29 152711 445190 285811 126388 417758"},
		{"494821 18 1861 107 364300 160 499638 116 167449 178 84", "160 107 116 18 84 178 1861 364300 494821 167449 499638"},
		{"211062 145 494215 45 135724 128 342609 187 48154 187 62", "62 45 145 128 211062 187 187 135724 48154 342609 494215"},
		{"388074 64 278780 176 398805 138 39383 42 295463 15 19", "15 42 19 64 138 176 39383 295463 388074 278780 398805"},
		{"377782 159 8676 5 173067 22 392171 69 378565 190 37", "22 5 190 37 159 69 392171 173067 8676 377782 378565"},
		{"15306 101 141591 141 344381 171 296610 125 205642 156 43", "101 141 43 125 171 156 15306 205642 141591 344381 296610"},
		{"170739 70 431525 23 383925 72 197040 69 150147 134 30", "30 23 70 134 72 69 150147 431525 197040 170739 383925"},
		{"219497 185 477309 109 374040 20 263568 178 283881 87 56", "20 109 56 185 87 178 374040 263568 283881 477309 219497"},
		{"90550 167 190232 50 314959 138 66219 165 108999 3 57", "3 50 138 165 57 167 190232 90550 66219 314959 108999"},
		{"162864 62 179896 106 325203 175 468214 63 408238 76 82", "106 62 63 82 175 76 325203 408238 468214 162864 179896"},
		{"390563 85 328667 185 146289 55 167658 103 164704 11 68", "11 103 55 85 185 68 164704 390563 146289 328667 167658"},
	}

	for _, tc := range tt {
		t.Run("OrderWeight", func(t *testing.T) {
			res := OrderWeight(tc.input1)
			if !reflect.DeepEqual(res, tc.expected) {
				t.Errorf("\nexpected:%v\ngot:%v", tc.expected, res)
			}
		})
	}
	for _, tc := range tt {
		t.Run("OrderWeightA", func(t *testing.T) {
			res := OrderWeightA(tc.input1)
			if !reflect.DeepEqual(res, tc.expected) {
				t.Errorf("\nexpected:%v\ngot:%v", tc.expected, res)
			}
		})
	}
}

//!+bench
// go test -v  -bench=.
// go test -bench . -benchmem
func BenchmarkSolution(b *testing.B) {
	for index := 0; index < b.N; index++ {
		OrderWeight("387087 176 351832 100 430372 8 58052 54 175432 120 269974 147 309754 91 404858 67 271476 164 295747 111 40")
	}
}

func BenchmarkSolutionA(b *testing.B) {
	for index := 0; index < b.N; index++ {
		OrderWeightA("387087 176 351832 100 430372 8 58052 54 175432 120 269974 147 309754 91 404858 67 271476 164 295747 111 40")
	}
}

/*
goos: linux
goarch: amd64
pkg: github.com/tarekbadrshalaan/codewars/5-kyu/8-Weight-for-weight/go
cpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz
BenchmarkSolution-8       148326              7043 ns/op            3440 B/op        181 allocs/op
BenchmarkSolutionA-8      401738              2554 ns/op             488 B/op          3 allocs/op
PASS
ok      github.com/tarekbadrshalaan/codewars/5-kyu/8-Weight-for-weight/go       2.188s
*/
